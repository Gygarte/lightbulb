import streamlit as st
import pandas as pd
from moonlight.database.struct_ols_model import OLSModel
from moonlight.database.struct_train_data import TrainData
from moonlight.database.struct_test_data import TestData
from moonlight.database.struct_forecast_data import ForecastsData
from moonlight.database.struct_prediction_data import PredictionData


def model_info_form(data: pd.DataFrame) -> None:
    """
    Renders a form to input model information in the Wage Monitor application.

    Parameters:
    - data: pd.DataFrame containing the data to be used in the model.
    """
    with st.form(key="model_info_form", enter_to_submit=False):
        st.write("Please fill in the model information below:")
        st.subheader("Model Information")

        model_name = st.text_input(label="Model name", placeholder="Enter model ID")
        model_version = st.text_input(
            label="Model Version", placeholder="Enter model version"
        )
        model_owner = st.text_input(
            label="Model Owner", placeholder="Enter model owner"
        )
        model_calibration_date = st.date_input(
            label="Model Calibration Date", value=pd.Timestamp.today()
        )
        model_description = st.text_area(
            label="Model Description", placeholder="Enter model description"
        )
        model_status = st.selectbox(
            label="Model Status", options=["Draft", "Active", "Archived"], index=0
        )
        model_type = st.selectbox(label="Model Type", options=["OLS"], index=0)

        endog = st.selectbox(
            label="Endogenous Variable", options=data.columns.tolist(), index=1
        )
        exog = st.multiselect(
            label="Exogenous Variables", options=data.columns.tolist()
        )

        train_interval = st.multiselect(
            label="Training Interval", options=data.index.tolist(), max_selections=2
        )
        test_interval = st.multiselect(
            label="Testing Interval", options=data.index.tolist(), max_selections=2
        )
        forecast_interval = st.multiselect(
            label="Prediction Interval", options=data.index.tolist(), max_selections=2
        )

        submitted = st.form_submit_button(label="Submit!")
        if submitted:
            # Here you would implement the logic to save the model information
            if train_interval:
                model = OLSModel(
                    name=model_name,
                    version=model_version,
                    owner=model_owner,
                    status=model_status,
                    type=model_type,
                    calibration_date=str(model_calibration_date),
                    description=model_description,
                    exog=exog,
                    endog=endog,
                )

                train_data = TrainData(
                    name="OLS model train data",
                    version=model_version,
                    owner=model_owner,
                    description="Autogenerated OLS model train data.",
                    status=model_status,
                    creation_date=str(model_calibration_date),
                    data=data.loc[
                        train_interval[0] : train_interval[1], exog + [endog]
                    ],
                    index=(str(train_interval[0]), str(train_interval[1])),
                )

                # Fit the model
                model.train(train_data)

                # Save the data to session_state
                st_train = st.session_state["train_data"]
                st_train.append(train_data)
                st.session_state["train_data"] = st_train

                # Save the data to the database
                st.session_state.db.insert(train_data)

            if test_interval:
                test_data = TestData(
                    name="OLS model test data",
                    version=model_version,
                    owner=model_owner,
                    description="Autogenerated OLS model test data.",
                    status=model_status,
                    creation_date=str(model_calibration_date),
                    data=data.loc[test_interval[0] : test_interval[1], exog + [endog]],
                    index=(str(test_interval[0]), str(test_interval[1])),
                )
                # TODO: Implement the test method in the OLSModel class
                # model.test(test_data)

                # Save the data to session_state
                st_test = st.session_state["test_data"]
                st_test.append(test_data)
                st.session_state["test_data"] = st_test

                # Save the data to the database
                st.session_state.db.insert(test_data)

            if forecast_interval:
                forecast_data = ForecastsData(
                    name="OLS model forecast data",
                    version=model_version,
                    owner=model_owner,
                    description="Autogenerated OLS model forecast data.",
                    status=model_status,
                    creation_date=str(model_calibration_date),
                    data=data.loc[forecast_interval[0] : forecast_interval[1], exog],
                    index=(str(forecast_interval[0]), str(forecast_interval[1])),
                )

                prediction_data = model.predict(forecast_data)

                # Save the data to session_state
                st_forecast = st.session_state["forecast_data"]
                st_prediction = st.session_state["prediction_data"]
                st_forecast.append(forecast_data)
                st_prediction.append(prediction_data)
                st.session_state["forecast_data"] = st_forecast
                st.session_state["prediction_data"] = st_prediction

                # Save the data to the database
                st.session_state.db.insert(forecast_data)
                st.session_state.db.insert(prediction_data)

            # The model data is saved the last because
            # it depends on which methods were called
            # Save the model in the session state
            st_model = st.session_state["model"]
            st_model.append(model)
            st.session_state["model"] = st_model

            # Save the model and data to the database
            st.session_state.db.insert(model)

            # Apped the model and data to the session state
            st.success("Model information saved successfully!")

            return True
